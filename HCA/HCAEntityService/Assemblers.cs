#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace HCAEntityService.Assemblers
{
	using Telerik.OpenAccess;
	using HCAEntityService.Dto;
	using HCAEntityService.Converters;
	using HRBlock.Library.BusinessObject.HCA;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

			
	public partial interface IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    TDto Assemble(TEntity entity);
	    TEntity Assemble(TEntity entity, TDto dto);
	
	    IEnumerable<TDto> Assemble(IEnumerable<TEntity> entityList);
	    IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList);
	}
	
	public abstract class Assembler<TDto, TEntity> : IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    public abstract TDto Assemble(TEntity domainEntity);
	    public abstract TEntity Assemble(TEntity entity, TDto dto);
	
	    public void AssembleNavigational(TEntity entity, TDto dto)
	    {
	    	this.AssembleReferences(entity, dto);
	    	this.AssembleCollections(entity, dto);
	    }
	
	    public abstract void AssembleReferences(TEntity entity, TDto dto);
	    public abstract void AssembleCollections(TEntity entity, TDto dto);
	
	
	    public virtual IEnumerable<TDto> Assemble(IEnumerable<TEntity> domainEntityList)
	    {
	        List<TDto> dtos = Activator.CreateInstance<List<TDto>>();
	        foreach (TEntity domainEntity in domainEntityList)
	        {
	            dtos.Add(Assemble(domainEntity));
	        }
	        return dtos;
	    }
	
	    public virtual IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList)
	    {
	        List<TEntity> domainEntities = Activator.CreateInstance<List<TEntity>>();
	        foreach (TDto dto in dtoList)
	        {
	            domainEntities.Add(Assemble(null, dto));
	        }
	        return domainEntities;
	    }
	}
	
	public partial interface ILicenseAssembler : IAssembler<LicenseDto, License>
	{ 
	
	}
	
	public partial class LicenseAssemblerBase : Assembler<LicenseDto, License>
	{
		/// <summary>
	    /// Invoked after the LicenseDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="LicenseDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(LicenseDto dto);
	
		/// <summary>
	    /// Invoked after the License instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="License"/> instance.</param>
		partial void OnEntityAssembled(License entity);
		
	    public override License Assemble(License entity, LicenseDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new License();
	        }
			
			entity.Id = dto.Id;
			entity.CandidateId = dto.CandidateId;
			entity.LicenseNo = dto.LicenseNo;
			entity.State = dto.State;
			entity.LicenseType = dto.LicenseType;
			entity.DateAcquired = dto.DateAcquired;
			entity.DateExpires = dto.DateExpires;
			entity.DateRenewed = dto.DateRenewed;
			entity.CreatedById = dto.CreatedById;
			entity.DateCreated = dto.DateCreated;
			entity.ModifiedById = dto.ModifiedById;
			entity.DateModified = dto.DateModified;
			entity.Active = dto.Active;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override LicenseDto Assemble(License entity)
	    {
	        LicenseDto dto = new LicenseDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.CandidateId = entity.CandidateId;
			dto.LicenseNo = entity.LicenseNo;
			dto.State = entity.State;
			dto.LicenseType = entity.LicenseType;
			dto.DateAcquired = entity.DateAcquired;
			dto.DateExpires = entity.DateExpires;
			dto.DateRenewed = entity.DateRenewed;
			dto.CreatedById = entity.CreatedById;
			dto.DateCreated = entity.DateCreated;
			dto.ModifiedById = entity.ModifiedById;
			dto.DateModified = entity.DateModified;
			dto.Active = entity.Active;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(License entity, LicenseDto dto)
	    {
			CandidateAssembler candidateAssembler = new CandidateAssembler();
			dto.Candidate = candidateAssembler.Assemble(entity.Candidate);

	    }
	
	    public override void AssembleCollections(License entity, LicenseDto dto)
	    {
	    }
	
	}
	
	
	public partial class LicenseAssembler : LicenseAssemblerBase, ILicenseAssembler
	{
	    
	}
	
	public partial interface ICarrierAssignmentAssembler : IAssembler<CarrierAssignmentDto, CarrierAssignment>
	{ 
	
	}
	
	public partial class CarrierAssignmentAssemblerBase : Assembler<CarrierAssignmentDto, CarrierAssignment>
	{
		/// <summary>
	    /// Invoked after the CarrierAssignmentDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CarrierAssignmentDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CarrierAssignmentDto dto);
	
		/// <summary>
	    /// Invoked after the CarrierAssignment instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="CarrierAssignment"/> instance.</param>
		partial void OnEntityAssembled(CarrierAssignment entity);
		
	    public override CarrierAssignment Assemble(CarrierAssignment entity, CarrierAssignmentDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new CarrierAssignment();
	        }
			
			entity.Id = dto.Id;
			entity.CandidateId = dto.CandidateId;
			entity.Code = dto.Code;
			entity.AgentId = dto.AgentId;
			entity.ProductType = dto.ProductType;
			entity.State = dto.State;
			entity.DateAcquired = dto.DateAcquired;
			entity.DateExpired = dto.DateExpired;
			entity.DateRenewed = dto.DateRenewed;
			entity.CreatedById = dto.CreatedById;
			entity.DateCreated = dto.DateCreated;
			entity.ModifiedById = dto.ModifiedById;
			entity.DateModified = dto.DateModified;
			entity.Active = dto.Active;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CarrierAssignmentDto Assemble(CarrierAssignment entity)
	    {
	        CarrierAssignmentDto dto = new CarrierAssignmentDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.CandidateId = entity.CandidateId;
			dto.Code = entity.Code;
			dto.AgentId = entity.AgentId;
			dto.ProductType = entity.ProductType;
			dto.State = entity.State;
			dto.DateAcquired = entity.DateAcquired;
			dto.DateExpired = entity.DateExpired;
			dto.DateRenewed = entity.DateRenewed;
			dto.CreatedById = entity.CreatedById;
			dto.DateCreated = entity.DateCreated;
			dto.ModifiedById = entity.ModifiedById;
			dto.DateModified = entity.DateModified;
			dto.Active = entity.Active;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(CarrierAssignment entity, CarrierAssignmentDto dto)
	    {
			CandidateAssembler candidateAssembler = new CandidateAssembler();
			dto.Candidate = candidateAssembler.Assemble(entity.Candidate);

	    }
	
	    public override void AssembleCollections(CarrierAssignment entity, CarrierAssignmentDto dto)
	    {
	    }
	
	}
	
	
	public partial class CarrierAssignmentAssembler : CarrierAssignmentAssemblerBase, ICarrierAssignmentAssembler
	{
	    
	}
	
	public partial interface ICandidateAssembler : IAssembler<CandidateDto, Candidate>
	{ 
	
	}
	
	public partial class CandidateAssemblerBase : Assembler<CandidateDto, Candidate>
	{
		/// <summary>
	    /// Invoked after the CandidateDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CandidateDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CandidateDto dto);
	
		/// <summary>
	    /// Invoked after the Candidate instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Candidate"/> instance.</param>
		partial void OnEntityAssembled(Candidate entity);
		
	    public override Candidate Assemble(Candidate entity, CandidateDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Candidate();
	        }
			
			entity.Id = dto.Id;
			entity.ModuleId = dto.ModuleId;
			entity.FirstName = dto.FirstName;
			entity.LastName = dto.LastName;
			entity.Email = dto.Email;
			entity.EmployeeId = dto.EmployeeId;
			entity.EmployeeRole = dto.EmployeeRole;
			entity.OfficeId = dto.OfficeId;
			entity.DeptId = dto.DeptId;
			entity.DistrictId = dto.DistrictId;
			entity.Region = dto.Region;
			entity.Market = dto.Market;
			entity.OfficePhoneNo = dto.OfficePhoneNo;
			entity.FFMUserId = dto.FFMUserId;
			entity.CreatedById = dto.CreatedById;
			entity.DateCreated = dto.DateCreated;
			entity.ModifiedById = dto.ModifiedById;
			entity.DateModified = dto.DateModified;
			entity.Active = dto.Active;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CandidateDto Assemble(Candidate entity)
	    {
	        CandidateDto dto = new CandidateDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.ModuleId = entity.ModuleId;
			dto.FirstName = entity.FirstName;
			dto.LastName = entity.LastName;
			dto.Email = entity.Email;
			dto.EmployeeId = entity.EmployeeId;
			dto.EmployeeRole = entity.EmployeeRole;
			dto.OfficeId = entity.OfficeId;
			dto.DeptId = entity.DeptId;
			dto.DistrictId = entity.DistrictId;
			dto.Region = entity.Region;
			dto.Market = entity.Market;
			dto.OfficePhoneNo = entity.OfficePhoneNo;
			dto.FFMUserId = entity.FFMUserId;
			dto.CreatedById = entity.CreatedById;
			dto.DateCreated = entity.DateCreated;
			dto.ModifiedById = entity.ModifiedById;
			dto.DateModified = entity.DateModified;
			dto.Active = entity.Active;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Candidate entity, CandidateDto dto)
	    {
	    }
	
	    public override void AssembleCollections(Candidate entity, CandidateDto dto)
	    {
			LicenseAssembler licenseAssembler = new LicenseAssembler();

			dto.Licenses = new List<LicenseDto>();
			foreach (License item in entity.Licenses)
			{
				var dtoItem = licenseAssembler.Assemble(item);
				dtoItem.Candidate = dto;
				dto.Licenses.Add(dtoItem);
			}

			CarrierAssignmentAssembler carrierAssignmentAssembler = new CarrierAssignmentAssembler();

			dto.CarrierAssignments = new List<CarrierAssignmentDto>();
			foreach (CarrierAssignment item in entity.CarrierAssignments)
			{
				var dtoItem = carrierAssignmentAssembler.Assemble(item);
				dtoItem.Candidate = dto;
				dto.CarrierAssignments.Add(dtoItem);
			}

			CertificationAssembler certificationAssembler = new CertificationAssembler();

			dto.Certifications = new List<CertificationDto>();
			foreach (Certification item in entity.Certifications)
			{
				var dtoItem = certificationAssembler.Assemble(item);
				dtoItem.Candidate = dto;
				dto.Certifications.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class CandidateAssembler : CandidateAssemblerBase, ICandidateAssembler
	{
	    
	}
	
	public partial interface ICertificationAssembler : IAssembler<CertificationDto, Certification>
	{ 
	
	}
	
	public partial class CertificationAssemblerBase : Assembler<CertificationDto, Certification>
	{
		/// <summary>
	    /// Invoked after the CertificationDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CertificationDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CertificationDto dto);
	
		/// <summary>
	    /// Invoked after the Certification instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Certification"/> instance.</param>
		partial void OnEntityAssembled(Certification entity);
		
	    public override Certification Assemble(Certification entity, CertificationDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Certification();
	        }
			
			entity.Id = dto.Id;
			entity.CandidateId = dto.CandidateId;
			entity.NPNId = dto.NPNId;
			entity.DateAcquired = dto.DateAcquired;
			entity.DateExpired = dto.DateExpired;
			entity.DateRenewed = dto.DateRenewed;
			entity.CreatedById = dto.CreatedById;
			entity.CreatedDate = dto.CreatedDate;
			entity.ModifiedById = dto.ModifiedById;
			entity.DateModified = dto.DateModified;
			entity.Active = dto.Active;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CertificationDto Assemble(Certification entity)
	    {
	        CertificationDto dto = new CertificationDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.CandidateId = entity.CandidateId;
			dto.NPNId = entity.NPNId;
			dto.DateAcquired = entity.DateAcquired;
			dto.DateExpired = entity.DateExpired;
			dto.DateRenewed = entity.DateRenewed;
			dto.CreatedById = entity.CreatedById;
			dto.CreatedDate = entity.CreatedDate;
			dto.ModifiedById = entity.ModifiedById;
			dto.DateModified = entity.DateModified;
			dto.Active = entity.Active;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Certification entity, CertificationDto dto)
	    {
			CandidateAssembler candidateAssembler = new CandidateAssembler();
			dto.Candidate = candidateAssembler.Assemble(entity.Candidate);

	    }
	
	    public override void AssembleCollections(Certification entity, CertificationDto dto)
	    {
	    }
	
	}
	
	
	public partial class CertificationAssembler : CertificationAssemblerBase, ICertificationAssembler
	{
	    
	}
}
#pragma warning restore 1591
