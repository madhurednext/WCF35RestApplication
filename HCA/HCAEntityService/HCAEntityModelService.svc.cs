#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Code is generated by Telerik Add OpenAccess Service Wizard
// using PlainDataService.tt template
    
namespace HCAEntityService
{
	using System.ServiceModel;
	using HCAEntityService.Dto;
	using HCAEntityService.Assemblers;
	using HCAEntityService.Repositories;
	using HCAEntityService.Services;
	using HRBlock.Library.BusinessObject.HCA;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;
    using HCAEntityService.Utils;

	/// <summary>
	/// HCAEntityModelService service class handler.
	/// </summary>
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
	public partial class HCAEntityModelService : IHCAEntityModelService
	{
	    /// <summary>
	    /// Maintains a list of objects affected by a business transaction and coordinates 
	    /// the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    private IHCAEntityModelUnitOfWork unitOfWork;
	    
	    /// <summary>
	    /// Get or sets the specific UnitOfWork. It maintains a list of objects affected 
	    /// by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    public IHCAEntityModelUnitOfWork UnitOfWork
	    {
	        get
	        {
	            if(this.unitOfWork == null)
	            {
	                this.unitOfWork = new HCAEntityModel();
	            }
	            return this.unitOfWork;
	        }
	        set
	        {
	            this.unitOfWork = value;
	        }
	    }	
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Candidate entity.
	    /// </summary>
	    private ICandidateService candidateservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Candidate entity.
	    /// </summary>
	    public virtual ICandidateService CandidateService
	    {
	        get
	        {
	            if (this.candidateservice == null)
	            {
	                ICandidateAssembler assembler = new CandidateAssembler();
	                ICandidateRepository repository = new CandidateRepository(this.UnitOfWork);
	
	                this.candidateservice = new CandidateService(assembler, repository);
	            }
	            return this.candidateservice;
	        }
	    }
	        
	    #region Candidates CRUD Operations
	
	    /// <summary>
	    /// Returns all candidates.
	    /// </summary>
	    /// <returns></returns>
        public AppGenericServiceResponse<CandidateDataList> ReadCandidates()	
	    {

            AppGenericServiceResponse<CandidateDataList> responseObj = new AppGenericServiceResponse<CandidateDataList>();


            IEnumerable<CandidateDto> enumarableCandidate = this.CandidateService.GetAll();
            List<CandidateDto> listCandidate = enumarableCandidate.ToList<CandidateDto>();

            CandidateDataList resultObj = new CandidateDataList();

            resultObj.CandidateList = listCandidate;

            responseObj.SetDataAndStopWatch(resultObj);

            return responseObj;

	       
	    }
	
	    /// <summary>
	    /// Returns a specified amount of candidates from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CandidateDto> ReadCandidatesPaged(int startIndex, int pageSize)
	    {
	        return this.CandidateService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all candidates filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CandidateDto> ReadCandidatesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CandidateService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of candidates from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CandidateDto> ReadCandidatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CandidateService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a candidate with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
        public AppGenericServiceResponse<CandidateDto> ReadCandidate(string dtoKey)
	    {
            AppGenericServiceResponse<CandidateDto> responseObj = new AppGenericServiceResponse<CandidateDto>();
            
            CandidateDto resultObj = this.CandidateService.GetByKey(dtoKey);

            responseObj.SetDataAndStopWatch(resultObj);

            return responseObj;
   }
	    
	    /// <summary>
	    /// Returns all candidates count.
	    /// </summary>
	    /// <returns></returns>
	    public int CandidatesCount()
	    {
	        return this.CandidateService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all candidates count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CandidatesCountFiltered(string filterExpression)
	    {
	        return this.CandidateService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new candidate from the given dto object into the database.
	    /// </summary>
	    /// <param name="candidate">The dto object.</param>
	    /// <returns>The dto key of the newly created candidate.</returns>
	    public AppGenericServiceResponse<string> CreateCandidate(CandidateDto candidate)
	    {

            AppGenericServiceResponse<string> responseObj = new AppGenericServiceResponse<string>();
            string key = this.CandidateService.Add(candidate);
            this.UnitOfWork.SaveChanges();
            responseObj.SetDataAndStopWatch(key);
            return responseObj;
	    }
	
	    /// <summary>
	    /// Updates an existing candidate in the database from the given dto object.
	    /// </summary>
	    /// <param name="candidate">The dto object.</param>
	    public void UpdateCandidate(CandidateDto candidate)
	    {
	        this.CandidateService.Update(candidate);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update candidates in the database from the given dto object list.
	    /// </summary>
	    /// <param name="candidates">The dto object list.</param>
	    public void UpdateCandidates(IEnumerable<CandidateDto> candidates)
	    {
	        if (candidates == null)
	        {
	            return;
	        }
	
	        foreach (CandidateDto candidate in candidates)
	        {
	            if (candidate == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCandidate(candidate);
	        }
	    }
	
	    /// <summary>
	    /// Deletes candidate from the database by the given dto object.
	    /// </summary>
	    /// <param name="candidate">The dto object.</param>
	    public void DeleteCandidate(CandidateDto candidate)
	    {
	        this.CandidateService.Delete(candidate);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete candidates from the database by the given dto object list.
	    /// </summary>
	    /// <param name="candidates">The dto object list.</param>
	    public void DeleteCandidates(IEnumerable<CandidateDto> candidates)
	    {
	        if (candidates == null)
	        {
	            return;
	        }
	
	        foreach (CandidateDto candidate in candidates)
	        {
	            if (candidate == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCandidate(candidate);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CarrierAssignment entity.
	    /// </summary>
	    private ICarrierAssignmentService carrierassignmentservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CarrierAssignment entity.
	    /// </summary>
	    public virtual ICarrierAssignmentService CarrierAssignmentService
	    {
	        get
	        {
	            if (this.carrierassignmentservice == null)
	            {
	                ICarrierAssignmentAssembler assembler = new CarrierAssignmentAssembler();
	                ICarrierAssignmentRepository repository = new CarrierAssignmentRepository(this.UnitOfWork);
	
	                this.carrierassignmentservice = new CarrierAssignmentService(assembler, repository);
	            }
	            return this.carrierassignmentservice;
	        }
	    }
	        
	    #region CarrierAssignments CRUD Operations
	
	    /// <summary>
	    /// Returns all carrierassignments.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CarrierAssignmentDto> ReadCarrierAssignments()	
	    {
	        return this.CarrierAssignmentService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of carrierassignments from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CarrierAssignmentDto> ReadCarrierAssignmentsPaged(int startIndex, int pageSize)
	    {
	        return this.CarrierAssignmentService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all carrierassignments filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CarrierAssignmentDto> ReadCarrierAssignmentsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CarrierAssignmentService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of carrierassignments from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CarrierAssignmentDto> ReadCarrierAssignmentsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CarrierAssignmentService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a carrierassignment with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CarrierAssignmentDto ReadCarrierAssignment(string dtoKey)
	    {
	        return this.CarrierAssignmentService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all carrierassignments count.
	    /// </summary>
	    /// <returns></returns>
	    public int CarrierAssignmentsCount()
	    {
	        return this.CarrierAssignmentService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all carrierassignments count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CarrierAssignmentsCountFiltered(string filterExpression)
	    {
	        return this.CarrierAssignmentService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new carrierassignment from the given dto object into the database.
	    /// </summary>
	    /// <param name="carrierassignment">The dto object.</param>
	    /// <returns>The dto key of the newly created carrierassignment.</returns>
	    public string CreateCarrierAssignment(CarrierAssignmentDto carrierassignment)
	    {
	        string key = this.CarrierAssignmentService.Add(carrierassignment);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing carrierassignment in the database from the given dto object.
	    /// </summary>
	    /// <param name="carrierassignment">The dto object.</param>
	    public void UpdateCarrierAssignment(CarrierAssignmentDto carrierassignment)
	    {
	        this.CarrierAssignmentService.Update(carrierassignment);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update carrierassignments in the database from the given dto object list.
	    /// </summary>
	    /// <param name="carrierassignments">The dto object list.</param>
	    public void UpdateCarrierAssignments(IEnumerable<CarrierAssignmentDto> carrierassignments)
	    {
	        if (carrierassignments == null)
	        {
	            return;
	        }
	
	        foreach (CarrierAssignmentDto carrierassignment in carrierassignments)
	        {
	            if (carrierassignment == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCarrierAssignment(carrierassignment);
	        }
	    }
	
	    /// <summary>
	    /// Deletes carrierassignment from the database by the given dto object.
	    /// </summary>
	    /// <param name="carrierassignment">The dto object.</param>
	    public void DeleteCarrierAssignment(CarrierAssignmentDto carrierassignment)
	    {
	        this.CarrierAssignmentService.Delete(carrierassignment);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete carrierassignments from the database by the given dto object list.
	    /// </summary>
	    /// <param name="carrierassignments">The dto object list.</param>
	    public void DeleteCarrierAssignments(IEnumerable<CarrierAssignmentDto> carrierassignments)
	    {
	        if (carrierassignments == null)
	        {
	            return;
	        }
	
	        foreach (CarrierAssignmentDto carrierassignment in carrierassignments)
	        {
	            if (carrierassignment == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCarrierAssignment(carrierassignment);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Certification entity.
	    /// </summary>
	    private ICertificationService certificationservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Certification entity.
	    /// </summary>
	    public virtual ICertificationService CertificationService
	    {
	        get
	        {
	            if (this.certificationservice == null)
	            {
	                ICertificationAssembler assembler = new CertificationAssembler();
	                ICertificationRepository repository = new CertificationRepository(this.UnitOfWork);
	
	                this.certificationservice = new CertificationService(assembler, repository);
	            }
	            return this.certificationservice;
	        }
	    }
	        
	    #region Certifications CRUD Operations
	
	    /// <summary>
	    /// Returns all certifications.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CertificationDto> ReadCertifications()	
	    {
	        return this.CertificationService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of certifications from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CertificationDto> ReadCertificationsPaged(int startIndex, int pageSize)
	    {
	        return this.CertificationService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all certifications filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CertificationDto> ReadCertificationsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CertificationService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of certifications from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CertificationDto> ReadCertificationsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CertificationService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a certification with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CertificationDto ReadCertification(string dtoKey)
	    {
	        return this.CertificationService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all certifications count.
	    /// </summary>
	    /// <returns></returns>
	    public int CertificationsCount()
	    {
	        return this.CertificationService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all certifications count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CertificationsCountFiltered(string filterExpression)
	    {
	        return this.CertificationService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new certification from the given dto object into the database.
	    /// </summary>
	    /// <param name="certification">The dto object.</param>
	    /// <returns>The dto key of the newly created certification.</returns>
	    public string CreateCertification(CertificationDto certification)
	    {
	        string key = this.CertificationService.Add(certification);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing certification in the database from the given dto object.
	    /// </summary>
	    /// <param name="certification">The dto object.</param>
	    public void UpdateCertification(CertificationDto certification)
	    {
	        this.CertificationService.Update(certification);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update certifications in the database from the given dto object list.
	    /// </summary>
	    /// <param name="certifications">The dto object list.</param>
	    public void UpdateCertifications(IEnumerable<CertificationDto> certifications)
	    {
	        if (certifications == null)
	        {
	            return;
	        }
	
	        foreach (CertificationDto certification in certifications)
	        {
	            if (certification == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCertification(certification);
	        }
	    }
	
	    /// <summary>
	    /// Deletes certification from the database by the given dto object.
	    /// </summary>
	    /// <param name="certification">The dto object.</param>
	    public void DeleteCertification(CertificationDto certification)
	    {
	        this.CertificationService.Delete(certification);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete certifications from the database by the given dto object list.
	    /// </summary>
	    /// <param name="certifications">The dto object list.</param>
	    public void DeleteCertifications(IEnumerable<CertificationDto> certifications)
	    {
	        if (certifications == null)
	        {
	            return;
	        }
	
	        foreach (CertificationDto certification in certifications)
	        {
	            if (certification == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCertification(certification);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against License entity.
	    /// </summary>
	    private ILicenseService licenseservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against License entity.
	    /// </summary>
	    public virtual ILicenseService LicenseService
	    {
	        get
	        {
	            if (this.licenseservice == null)
	            {
	                ILicenseAssembler assembler = new LicenseAssembler();
	                ILicenseRepository repository = new LicenseRepository(this.UnitOfWork);
	
	                this.licenseservice = new LicenseService(assembler, repository);
	            }
	            return this.licenseservice;
	        }
	    }
	        
	    #region Licenses CRUD Operations
	
	    /// <summary>
	    /// Returns all licenses.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<LicenseDto> ReadLicenses()	
	    {
	        return this.LicenseService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of licenses from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<LicenseDto> ReadLicensesPaged(int startIndex, int pageSize)
	    {
	        return this.LicenseService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all licenses filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<LicenseDto> ReadLicensesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.LicenseService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of licenses from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<LicenseDto> ReadLicensesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.LicenseService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a license with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public LicenseDto ReadLicense(string dtoKey)
	    {
	        return this.LicenseService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all licenses count.
	    /// </summary>
	    /// <returns></returns>
	    public int LicensesCount()
	    {
	        return this.LicenseService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all licenses count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int LicensesCountFiltered(string filterExpression)
	    {
	        return this.LicenseService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new license from the given dto object into the database.
	    /// </summary>
	    /// <param name="license">The dto object.</param>
	    /// <returns>The dto key of the newly created license.</returns>
	    public string CreateLicense(LicenseDto license)
	    {
	        string key = this.LicenseService.Add(license);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing license in the database from the given dto object.
	    /// </summary>
	    /// <param name="license">The dto object.</param>
	    public void UpdateLicense(LicenseDto license)
	    {
	        this.LicenseService.Update(license);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update licenses in the database from the given dto object list.
	    /// </summary>
	    /// <param name="licenses">The dto object list.</param>
	    public void UpdateLicenses(IEnumerable<LicenseDto> licenses)
	    {
	        if (licenses == null)
	        {
	            return;
	        }
	
	        foreach (LicenseDto license in licenses)
	        {
	            if (license == null)
	            {
	                continue;
	            }
	            
	            this.UpdateLicense(license);
	        }
	    }
	
	    /// <summary>
	    /// Deletes license from the database by the given dto object.
	    /// </summary>
	    /// <param name="license">The dto object.</param>
	    public void DeleteLicense(LicenseDto license)
	    {
	        this.LicenseService.Delete(license);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete licenses from the database by the given dto object list.
	    /// </summary>
	    /// <param name="licenses">The dto object list.</param>
	    public void DeleteLicenses(IEnumerable<LicenseDto> licenses)
	    {
	        if (licenses == null)
	        {
	            return;
	        }
	
	        foreach (LicenseDto license in licenses)
	        {
	            if (license == null)
	            {
	                continue;
	            }
	            
	            this.DeleteLicense(license);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// HCAEntityModelService finalizer.
	    /// </summary>
	    ~HCAEntityModelService()
	    {
	        IDisposable context = this.unitOfWork as IDisposable;
	        if(context != null)
	        {
	            context.Dispose();
	        }
	    }
	}
}
#pragma warning restore 1591
